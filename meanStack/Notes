
***************************
NodeJS
***************************
- load module using require
- expose functionality using module.exports

NodeJS is designed to address I/O scalability, not computational scalability

***************************
NPM
***************************
- NPM is a package manager for node
- Re-usable modules, packages and libraries
- Move code between environments
- manage dependency

npm install express --save
npm install mocha --save-dev

Usually it is a good practice to keep node_modules dependencies away from git
Only fetch during development
To do that, with a package.json file, run   npm install

How to install dependencies on a production server?
npm install --production
It only installs dependencies but will leave dev dependencies out

package.json
Using 'script' field, you can add/manage your own script
Eg:
"start" : "node app.js"
then you can use 'npm start' to run 'node app.js'

***************************
express
***************************
- the web application framework
var app = express();
app.set('port', 3000);
app.get('port');
var server = app.listen(3000, function() {
    var port = server.adress().port;
})

// return string
app.get('/', function(req, res) {
    res.status(404).send('express yourself');
});

// return json
res.status(200).json({
    jsonData: true
});

// return file (html, js...)
res.status(200).sendFile(path.join(__dirname, "app.js"));
// __dirname represents current directory
res.status(200).sendFile(path.join(__dirname, 'public', 'index.html'));

- Serving static files from express
- defining 'static' folder
app.use(express.static(path.join(__dirname, 'public')));
app.use('/public', express.static(path.join(__dirname, 'public')));

- Middleware
app.use() //Use an express middleware
// loggin middleware
app.use('/css', function(req, res, next) {
    console.log(req.method, req.url);
    next();
});

- Express router
- Using Contorller to define functionality
- Express URL parameters
    app.route('/hotels/:hotelId').get(callback);
    req.params.[paramName]
- Express URL query strings
    req.query.[paramName]
- How to deal with posted form  
    middleware: body-parser
    npm install --save body-parser
    app.use(bodyParser.urlencoded({ extended : false }));
    req.body

- [BONUS] Nodemon
    A utility that monitors you application files with changes and automatically restarts the
    app when the file is changed
    NEVER use in application, only for dev

    Configure Nodemon
    nodemon.json

***************************
MongoDB
***************************

Introduction to NO-SQL database

// Be able to use mongo shell in terminal
export PATH=$PATH:/Users/guangyang/Downloads/mongodb/bin

Types of NoSQL database:
- key-value store
- Document store (MongoDB)
- Graph database

MongoDB collections
- Similar to the idea of table in relational database

MongoDB shell
- list databases and collections
- create databases, collections and documents
- retrieve documents

Mongo shell
- mongo
- show dbs
- use <database name>
- show collections
- create a new db: use <new name>
- create a new collection: db.createCollection(<collection name>)
- insertion: db.<collectionName>.insert({//expect a json object})

Queries:
- db.<collectionName>.find()  // show everything in that collection
- db.<collectionName>.find().pretty()  //format data that's returned
- Eg:
db.tech.insert([
    {
        name: "express",
        role: "app server"
    }, {
        name: "angular",
        role: "front end"
    }, {
        name: "nodeJS",
        role: "platform"
    }
])

- Querying DB to find documents
- Modify the data returned: Eg sorting
- Updating documents
- Deleting documents

Querying:
- db.<collectionName>.find({"_id" : ObjectId("58ed990dc037e4d1d4022188")})
- db.<collectionName>.find({"name_id" : "alex"})

sort:
-  db.<collectionName>.find(<query>).sort({'name': 1})
'name' can be any field
1, ascending; 2, descending

projection:
- db.tech.find({}, {"name": true})
{} can be any query
{"name": true} can be any field true/false
NOTE:
- inclusion of '_id' is the only case when we are allowed to have a mix of inclusion and exclusion
in a single query. in other cases, only inclusion or only exclusion is allowed

update:
- db.tech.update({"name": "Angular"}, { $set: {"name": "AngularJS"}})
 ONLY UPDATES FIRST ONE ENCOUNTERED

- db.tech.update({}, { $set: { "language" : "javascript" }, {multi: true}})
 UPDATE ALL

delete:
- db.tech.remove({"name": "express"})
- db.tech.drop() // delete collection

Importing and exporting data
- export/import with bson
mongodump --db meantest
mongorestore --db meantest2 --gzip dump/meantest/

- export/import with json
mongoexport --db meantest --collection tech //print to console
mongoexport --db meantest --collection tech --out MEAN/api/data/tech.json
//export to a file, json representation of the database
mongoexport --db meantest --collection tech --out MEAN/api/data/tech.json --jsonArray --pretty
ï¿¼mongoimport --db mean2 --collection tech --jsonArray api/data/tech.json

- install driver
npm install mongodb --save //use --save flag to ensure we save that into our package.json

***************************
REST API
***************************
GET     /api/hotels             Get all/multiple hotels
POST    /api/hotels             Create a new hotel
GET     /api/hotels/1234        Get a specific hotel
PUT     /api/hotels/1234        Update a specific hotel
DELETE  /api/hotels/1234        Delete a specific hotel

- Why mongoose?
data schemas


***************************
AngularJS
***************************
1. Include angular in the dependency
2. Need to specify the root of the appilication by 'ng-app'
    Eg: <html ng-app='meanhotel'>
3. Expressions: {{variable}}
4. Data binding with 'ng-model'
    Eg:
    <p> Hello, {{user}} </p>
    <input type='text' name='' id='' ng-mode='user' >
5. Need to be careful of the scope of 'ng-app'
    Outside of the scope, any angular expressions won't work

- Build-in directives
    directives are DOM markers to tell angular to give certain behaviors to the DOM element
1. ng-init:
    ng-init is a good directive to intialize variables
    Eg: 
    <div ng-init="name = 'Alex'">
        {{name}}
    </div>
2. {{}} is short for 'ng-bind'
    Eg:
    <p ng-bind="name"></p>
3. ng-click
    register a click event
    Eg:
    <div ng-init="number = 0">
        <button ng-click="number = number + 1">+1</button>
        <button ng-click="number = number - 1">-1</button>
        <p> {{number}} </p>
    </div>
4. ng-if
    if condition directive that can check the value of an ng-model variable
    Eg:
    <input type="checkbox" ng-model='isChecked'>
    <p ng-if='isChecked'>Secrect message</p>
5. ng-show
    check whether to show the element similar to ng-if
** ng-if vs ng-show **
ng-if actually removes element from DOM tree
ng-show adds 'display: none' to the element
6. ng-clas
    directive that can conditionally change css class of an element
    Eg:
    <input type="text" ng-model="guess" ng-class="{classOne: guess != number, classTwo: guess == number}">
7. ng-repeat
    iterate through list
    Eg:
    <div ng-init="numbers = [0,1,2,3,4,5,6,7]">
        <ul>
            <li ng-repeat="number in numbers" ng-class="{red: $even, green: $odd}">{{number}}</li>
        </ul>
    </div>
** by default, ng-repeat tracks element by value, so it does not allow duplicates **
Eg: following will fail
    <div ng-init="names = ['Smith', 'Smith']">
        <ul>
            <li ng-repeat="name in names">{{name}}</li>
        </ul>
    </div>
** Instead of tracking by value, we can track element by index **
    <li ng-repeat="name in names track by $index">{{name}}</li>
iterate through objects
    <div ng-init="names = [{first: 'alex', last: 'yang'}, {first:'mimo',last:'jiang'}]">
        <ul>
            <li ng-repeat="name in names">{{name.first}} {{name.last}}</li>
        </ul>
    </div>
8. ng-options
    similar to ng-repeat, but populate items into select element (dropdown)
    Eg:
    <div ng-init="rebels = [
                    {name: 'alex yang', age: 25, gender:'male'}, 
                    {name: 'mimo jiang', age: 24, gender:'female'}
                ]" >
        <select name="" id="" ng-model="rebel" ng-options="rebel.gender for rebel in rebels"></select>
        <p>You have selected {{rebel.name}}</p>
    </div>
    //Group by rebel.gender
    //selected item goes int {{rebel}}
9. ng-cloak
    prevent browser flickering caused by angular js
    for more details, see course 36

- Build in filter:
1. currency filter: currency
    Eg:
    {{variable | currency}}
    <p> {{amount | currency:"$"}} </p>
2. number filter: number
    Eg:
    <p> {{-amount | number: 4}}</p> //number precision
3. string filter
    uppercase, Eg: p> {{string | uppercase}}</p>
    lowercase: .....
    date:
    Eg: 
    <div ng-init="date = 1399648945000">
        <p> {{date | date}}</p>
    </div>
    <p> {{date | date:'medium'}}</p> // short
    <p> {{date | date:'yyyy - mm - dd'}}</p>
    <p> {{date | date:'yyyy - MMMM - dd'}}</p>
    <p> {{date | date:'yyyy - MMMM - dd (H:m)'}}</p>
4. limit filter
    <div ng-init="array = [0,1,2,3,4,5,6]">
        <p> {{array | limitTo: -2}}</p>
    </div> // will output [5,6] <--- last two element
    <p> {{array | limitTo: 4}}</p> //output; [0,1,2,3]
5. orderBy filter
    <ul>
      <li ng-repeat="rebel in rebels | orderBy: '-age'"> //reverse order by age
        {{rebel.name}}--age: {{rebel.age}}--class: {{rebel.class}}
      </li>
    </ul>
    <li ng-repeat="rebel in rebels | orderBy: 'name'"> //order by name
    <<li ng-repeat="rebel in rebels | orderBy: ['class', '-age']"> //order by class then reverse age
6. filter filter
    <li ng-repeat="rebel in rebels | filter: 'al'"> // filter by substring on all variables
    <input type="text" ng-model="search.name"></input> // filter on name variable
    <li ng-repeat="rebel in rebels | filter: search">
        {{rebel.name}}--age: {{rebel.age}}--class: {{rebel.class}}
    </li> 
    <input type="text" ng-model="search.$"></input> // $ means search for all

- Controller
    angular.module("myApp", []).controller("MyController", MyController);
    function MyController($scope) {
      $scope.name = 'Alex';
    }
    <div ng-controller="MyController">
        <p>Hello {{ name }}</p>
    </div>

    $scope.increment = function() {
        $scope.number++;
    };
    <button ng-click="increment()">+</button>

** better practice is to use controllerAs syntax **
function MyController() {
    var vm = this;
    vm.name = 'alex yang';
}
function MyController2() {
    var vm = this;
    vm.name = 'alex yang copy';
};
<div ng-controller='MyController as MyCtrl'">
    {{MyCtrl.name}}
    <div ng-controller='MyController2 as MyCtrl2'">
        {{MyCtrl2.name}}
    </div>                      
</div>