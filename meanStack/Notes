
***************************
NodeJS
***************************
- load module using require
- expose functionality using module.exports

NodeJS is designed to address I/O scalability, not computational scalability

***************************
NPM
***************************
- NPM is a package manager for node
- Re-usable modules, packages and libraries
- Move code between environments
- manage dependency

npm install express --save
npm install mocha --save-dev

Usually it is a good practice to keep node_modules dependencies away from git
Only fetch during development
To do that, with a package.json file, run   npm install

How to install dependencies on a production server?
npm install --production
It only installs dependencies but will leave dev dependencies out

package.json
Using 'script' field, you can add/manage your own script
Eg:
"start" : "node app.js"
then you can use 'npm start' to run 'node app.js'

***************************
express
***************************
- the web application framework
var app = express();
app.set('port', 3000);
app.get('port');
var server = app.listen(3000, function() {
    var port = server.adress().port;
})

// return string
app.get('/', function(req, res) {
    res.status(404).send('express yourself');
});

// return json
res.status(200).json({
    jsonData: true
});

// return file (html, js...)
res.status(200).sendFile(path.join(__dirname, "app.js"));
// __dirname represents current directory
res.status(200).sendFile(path.join(__dirname, 'public', 'index.html'));

- Serving static files from express
- defining 'static' folder
app.use(express.static(path.join(__dirname, 'public')));
app.use('/public', express.static(path.join(__dirname, 'public')));

- Middleware
app.use() //Use an express middleware
// loggin middleware
app.use('/css', function(req, res, next) {
    console.log(req.method, req.url);
    next();
});

- Express router

***************************
MongoDB
***************************

Introduction to NO-SQL database

Types of NoSQL database:
- key-value store
- Document store (MongoDB)
- Graph database

MongoDB collections
- Similar to the idea of table in relational database

MongoDB shell
- list databases and collections
- create databases, collections and documents
- retrieve documents

Mongo shell
- mongo
- show dbs
- use <database name>
- show collections
- create a new db: use <new name>
- create a new collection: db.createCollection(<collection name>)
- insertion: db.<collectionName>.insert({//expect a json object})

Queries:
- db.<collectionName>.find()  // show everything in that collection
- db.<collectionName>.find().pretty()  //format data that's returned
- Eg:
db.tech.insert([
    {
        name: "express",
        role: "app server"
    }, {
        name: "angular",
        role: "front end"
    }, {
        name: "nodeJS",
        role: "platform"
    }
])

- Querying DB to find documents
- Modify the data returned: Eg sorting
- Updating documents
- Deleting documents

Querying:
- db.<collectionName>.find({"_id" : ObjectId("58ed990dc037e4d1d4022188")})
- db.<collectionName>.find({"name_id" : "alex"})

sort:
-  db.<collectionName>.find(<query>).sort({'name': 1})
'name' can be any field
1, ascending; 2, descending

projection:
- db.tech.find({}, {"name": true})
{} can be any query
{"name": true} can be any field true/false
NOTE:
- inclusion of '_id' is the only case when we are allowed to have a mix of inclusion and exclusion
in a single query. in other cases, only inclusion or only exclusion is allowed

update:
- db.tech.update({"name": "Angular"}, { $set: {"name": "AngularJS"}})
 ONLY UPDATES FIRST ONE ENCOUNTERED

- db.tech.update({}, { $set: { "language" : "javascript" }, {multi: true}})
 UPDATE ALL

delete:
- db.tech.remove({"name": "express"})
- db.tech.drop() // delete collection

Importing and exporting data
- export/import with bson
mongodump --db meantest
mongorestore --db meantest2 --gzip dump/meantest/

- export/import with json
mongoexport --db meantest --collection tech //print to console
mongoexport --db meantest --collection tech --out MEAN/api/data/tech.json
//export to a file, json representation of the database
mongoexport --db meantest --collection tech --out MEAN/api/data/tech.json --jsonArray --pretty